{
  "ReactComponentWithProps": {
    "prefix": "rnc",
    "body": [
      "import React from 'react';",
      "import { View, Text } from 'react-native';",
      "",
      "// import styles from './styles'",
      "",
      "interface OwnProps {",
      "",
      "}",
      "",
      "type Props = OwnProps;",
      "",
      "const ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}} = (props: Props) => {",
      "  ${0}",
      "  return (",
      "    <View>",
      "      <Text>${1:} Component</Text>",
      "    </View>",
      "  );",
      "}",
      "",
      "export default ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}};",
      ""
    ],
    "description": "Create a React Native Component that use only Props"
  },
  "ReduxComponent": {
    "prefix": "rnc-redux",
    "body": [
      "import React from 'react';",
      "import { View, Text } from 'react-native';",
      "",
      "import { connect } from 'react-redux';",
      "",
      "// import styles from './styles'",
      "",
      "interface StateProps {",
      "}",
      "",
      "interface OwnProps {",
      "}",
      "",
      "type Props = StateProps & OwnProps;",
      "",
      "const ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}} = (props: Props) => {",
      "  ${0}",
      "  return (",
      "    <View>",
      "      <Text>${1:} Component</Text>",
      "    </View>",
      "  );",
      "}",
      "",
      "const mapStateToProps = state => ({});",
      "",
      "export default connect(mapStateToProps)(${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}});",
      ""
    ],
    "description": "Create React Native Redux Component with mapDispatchToProps"
  },
  "ReduxComponentWithDispatch": {
    "prefix": "rnc-redux-dispatch",
    "body": [
      "import React from 'react';",
      "import { View, Text } from 'react-native';",
      "",
      "import { connect } from 'react-redux';",
      "",
      "// import styles from './styles'",
      "",
      "interface StateProps {",
      "}",
      "",
      "interface DispatchProps {",
      "}",
      "",
      "interface OwnProps {",
      "}",
      "",
      "type Props = StateProps & DispatchProps & OwnProps;",
      "",
      "const ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}} = (props: Props) => {",
      "  ${0}",
      "  return (",
      "    <View>",
      "      <Text>${1:} Component</Text>",
      "    </View>",
      "  );",
      "}",
      "",
      "const mapStateToProps = state => ({});",
      "",
      "const mapDispatchToProps = dispatch => ({});",
      "",
      "export default connect(",
      "  mapStateToProps,",
      "  mapDispatchToProps",
      ")(${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}});",
      ""
    ],
    "description": "Create React Native Redux Component with mapDispatchToProps"
  },
  "UseStateHook": {
    "prefix": "state-hook",
    "body": [
      "const [${1}, set${1/(.*)/${1:/capitalize}/}] = useState(${2:''});"
    ],
    "description": "Create a state using react hooks"
  },
  "ComponentDidMountHook": {
    "prefix": "cdm-hook",
    "body": [
      "// Component Did Mount using React Hooks",
      "useEffect(() => {",
      "  $0",
      "}, []);"
    ],
    "description": "Component Did Mount using react hooks"
  },
  "ComponentDidUpdateHook": {
    "prefix": "cdupdate-hook",
    "body": [
      "// Component Did Update using React Hooks",
      "useEffect(() => {",
      "  $0",
      "});"
    ],
    "description": "Component Did Update using react hooks"
  },
  "ComponentWillUnmountHook": {
    "prefix": "cwunmount-hook",
    "body": [
      "// Component Will Unmount using React Hooks",
      "useEffect(() => () => {",
      "  $0",
      "}, []);"
    ],
    "description": "Component Will Unmount using react hooks"
  }
}
